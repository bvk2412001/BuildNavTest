[1,["06xUcSoexH8LTWG4fsB8lS@f9941","43KrPndnVPHq7N+m9rY96D@f9941","7dj5uJT9FMn6OrOOx83tfK@f9941","21n7Aj4ipP+JY5hCmGttCO","0awbeJZmJOGa9+5b8ExhfQ","02F2TVMidMi5S7EnoGPu01","74dBX3jmtEkaqXgQZOBhsX","c7AkogUdhKYr0JAP/Np5MU@f9941","ebOkmDg5BOsKHTQCwWIToG@f9941","2c+NkQqN5Lj5V7DXyvmZWm@f9941","a7WUJ6u+9Gf4/kbltSVkiG","6fM9kzfAhHaYGJRA4JD1RF","7dj5uJT9FMn6OrOOx83tfK@6c48a"],["node","_spriteFrame","_parent","_normalSprite","_effectAsset","bg","_cameraComponent","scene","_textureSource"],[["cc.Node",["_name","_layer","_id","_components","_children","_lpos","_parent"],0,9,2,5,1],["cc.Sprite",["_sizeMode","_type","node","_spriteFrame","_color"],1,1,6,5],["cc.Label",["_string","_actualFontSize","_fontSize","_isItalic","_isBold","_lineHeight","_isUnderline","node"],-4,1],["cc.UITransform",["node","_contentSize"],3,1,5],["cc.Widget",["_alignFlags","_originalWidth","_originalHeight","node"],0,1],"cc.SpriteFrame",["cc.SceneAsset",["_name"],2],["cc.Node",["_name","_layer","_parent","_components"],1,1,12],["cc.Node",["_name","_id","_parent","_components","_lpos"],1,1,2,5],["cc.Layout",["_resizeMode","_layoutType","_spacingX","node"],0,1],["d773b1/HlZAzpx2ym49G3JF",["node"],3,1],["f139eZcCV1BMJATtYpZqGbk",["node","bg","mat"],3,1,1,3],["cc.Canvas",["node","_cameraComponent"],3,1,1],["cc.Button",["_transition","node","clickEvents","_hoverColor","_pressedColor","_normalSprite"],2,1,9,5,5,6],["cc.ClickEvent",["_componentId","handler","customEventData","target"],0,1],["cc.Scene",["_name","_children","_globals"],2,2,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree","skin","lightProbeInfo","postSettings"],3,4,4,4,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumLDR","_skyColorHDR"],2,5],["cc.ShadowsInfo",["_shadowColor","_size"],3,5,5],["cc.SkyboxInfo",[],3],["cc.FogInfo",[],3],["cc.OctreeInfo",[],3],["cc.SkinInfo",[],3],["cc.LightProbeInfo",[],3],["cc.PostSettingsInfo",[],3],["cc.Camera",["_projection","_priority","_orthoHeight","_far","_clearFlags","_visibility","node","_color"],-3,1,5],["cc.Material",["_name","_states","_defines","_props"],0,12],["cc.Material",["_name","_props","_defines"],0],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[3,0,1,1],[0,0,1,6,3,5,3],[1,0,2,4,3,2],[4,0,1,2,3,4],[1,1,0,2,3,3],[1,2,3,1],[13,0,1,2,3,4,5,2],[14,0,1,2,3,4],[2,0,1,2,3,4,7,6],[0,0,1,4,3,3],[0,0,1,6,4,3,5,3],[28,0,1,2,4],[6,0,2],[0,0,1,4,3,5,3],[0,0,1,2,4,3,5,4],[0,0,1,6,4,3,3],[0,0,1,6,3,3],[7,0,1,2,3,3],[8,0,1,2,3,4,3],[3,0,1],[9,0,1,2,3,4],[10,0,1],[4,0,3,2],[11,0,1,2,1],[12,0,1,1],[1,0,2,4,2],[15,0,1,2,2],[16,0,1,2,3,4,5,6,7,1],[17,0,1,2],[18,0,1,1],[19,1],[20,1],[21,1],[22,1],[23,1],[24,1],[2,0,1,2,5,3,4,7,7],[2,0,1,2,3,4,6,7,7],[25,0,1,2,3,4,5,6,7,7],[26,0,1,2,3,4],[27,0,1,2,4]],[[[[12,"Demo"],[13,"SceneLayer",33554432,[-4,-5,-6],[[0,-1,[5,1700,400]],[20,1,1,100,-2],[21,-3]],[1,0,100,0]],[9,"BGLayer",33554432,[-11,-12,-13,-14],[[0,-7,[5,1920,1080]],[3,45,100,100,-8],[23,-10,-9,[1,2,3,4]]]],[9,"TittlsLayer",33554432,[-16,-17,-18,-19,-20,-21],[[19,-15]]],[14,"Canvas",33554432,"4cx/9vwglGuaiijbYnB1sN",[2,1,3],[[0,-22,[5,1920,1080]],[24,-24,-23],[22,45,-25]],[1,960,540,0]],[10,"scene1",33554432,1,[-29],[[0,-26,[5,500,460]],[4,2,0,-27,6],[6,1,-28,[[7,"d773b1/HlZAzpx2ym49G3JF","loadScene","1",1]],[4,4292258182],[4,4286583597],7]],[1,-600,0,0]],[15,"scene2",33554432,1,[-33],[[0,-30,[5,500,460]],[4,2,0,-31,9],[6,1,-32,[[7,"d773b1/HlZAzpx2ym49G3JF","loadScene","2",1]],[4,4292258182],[4,4286583597],10]]],[10,"scene3",33554432,1,[-37],[[0,-34,[5,500,460]],[4,2,0,-35,12],[6,1,-36,[[7,"d773b1/HlZAzpx2ym49G3JF","loadScene","3",1]],[4,4292258182],[4,4286583597],13]],[1,600,0,0]],[16,"SpriteSplash",33554432,2,[[0,-38,[5,1920,1080]],[2,0,-39,[4,4278321152],0],[3,45,100,100,-40]]],[17,"Bg",33554432,2,[[[0,-41,[5,1920,1080]],-42,[3,45,40,36,-43]],4,1,4]],[26,"Demo",[-44,4],[27,[28,0.5208,[2,0.2,0.5,0.8,0.520833125]],[29,[4,4283190348],[0,512,512]],[30],[31],[32],[33],[34],[35]]],[1,"tittle",33554432,2,[[0,-45,[5,466.69248870247515,63]],[36,"Cocos Easy Navmesh",44,44,50,true,true,-46]],[1,620,-280,0]],[1,"iwae",33554432,2,[[0,-47,[5,171.0411312283978,50.4]],[37,"2022.3.12 by iwae",20,20,true,true,true,-48]],[1,760,-380,0]],[1,"scene1",33554432,5,[[0,-49,[5,392,352]],[5,-50,5]],[1,0,-20,0]],[1,"scene1",33554432,6,[[0,-51,[5,392,352]],[5,-52,8]],[1,0,-20,0]],[1,"scene1",33554432,7,[[0,-53,[5,380,340]],[5,-54,11]],[1,0,-20,0]],[1,"Glow",33554432,3,[[0,-55,[5,400,60]],[2,0,-56,[4,2885636176],14]],[1,-600,320,0]],[1,"Glow",33554432,3,[[0,-57,[5,400,60]],[2,0,-58,[4,2885636176],15]],[1,0,320,0]],[1,"Glow",33554432,3,[[0,-59,[5,400,60]],[2,0,-60,[4,2885636176],16]],[1,600,320,0]],[1,"Label",33554432,3,[[0,-61,[5,151.65203621111604,50.4]],[8,"迷宫场景",36,36,true,true,-62]],[1,-600,320,0]],[1,"Label",33554432,3,[[0,-63,[5,151.65203621111604,50.4]],[8,"斜坡场景",36,36,true,true,-64]],[1,0,320,0]],[1,"Label",33554432,3,[[0,-65,[5,151.65203621111604,50.4]],[8,"物理测试",36,36,true,true,-66]],[1,600,320,0]],[18,"uiCamera","06BfMF4VVPzJtGcsQpQREh",10,[-67],[1,960,540,1000]],[38,0,1073741824,644.8854961832061,2000,6,41943040,22,[4,4278190080]],[25,0,9,[4,4278190080]]],0,[0,0,1,0,0,1,0,0,1,0,-1,5,0,-2,6,0,-3,7,0,0,2,0,0,2,0,5,24,0,0,2,0,-1,8,0,-2,9,0,-3,11,0,-4,12,0,0,3,0,-1,16,0,-2,17,0,-3,18,0,-4,19,0,-5,20,0,-6,21,0,0,4,0,6,23,0,0,4,0,0,4,0,0,5,0,0,5,0,0,5,0,-1,13,0,0,6,0,0,6,0,0,6,0,-1,14,0,0,7,0,0,7,0,0,7,0,-1,15,0,0,8,0,0,8,0,0,8,0,0,9,0,-2,24,0,0,9,0,-1,22,0,0,11,0,0,11,0,0,12,0,0,12,0,0,13,0,0,13,0,0,14,0,0,14,0,0,15,0,0,15,0,0,16,0,0,16,0,0,17,0,0,17,0,0,18,0,0,18,0,0,19,0,0,19,0,0,20,0,0,20,0,0,21,0,0,21,0,-1,23,0,7,10,1,2,4,2,2,4,3,2,4,4,2,10,67],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24],[1,-1,-2,-3,-4,1,1,3,1,1,3,1,1,3,1,1,1,1],[2,3,4,5,6,7,0,0,8,0,0,9,0,0,1,1,1,2]],[[[39,"fire",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{"PI":3.1415},"iResolution",8,[0,1920,1080],"iMouse",8,[2,1,1,1,1]]],11]]],0,0,[0],[4],[10]],[[[11,"../Res/UI/shadertoy/space2",[{"hash":764789275,"name":"../Res/UI/shadertoy/space2|sprite-vs:vert|sprite-fs:frag","blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Uniforms","stageFlags":16,"binding":1,"members":[{"name":"iMouse","type":16,"count":1},{"name":"iResolution","type":14,"count":1}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"sampleType":0,"tags":{"builtin":"local"},"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Uniforms","stageFlags":16,"binding":1,"members":[{"name":"iMouse","type":16,"count":1},{"name":"iResolution","type":14,"count":1}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n    highp vec4 cc_reflectionProbeBlendData1;\n    highp vec4 cc_reflectionProbeBlendData2;\n  };\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define REFLECTION_PROBE_TYPE_BLEND 3\n  #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n      #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_SPHERE 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_POINT 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n  #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n    #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n  #endif\n  #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n  #endif\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 color;\nout vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n  pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n  pos = cc_matView * pos;\n  pos.xyz = floor(pos.xyz);\n  pos = cc_matProj * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n  uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\n  precision highp float;\n  #if USE_ALPHA_TEST\n    layout(std140) uniform ALPHA_TEST_DATA {\n      float alphaThreshold;\n    };\n  #endif\n  layout(std140) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n    mediump vec4 cc_probeInfo;\n    mediump vec4 cc_debug_view_mode;\n  };\n  layout(std140) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_surfaceTransform;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  in vec4 color;\n  #if USE_TEXTURE\n    in vec2 uv0;\n    uniform sampler2D cc_spriteTexture;\n  #endif\n  layout(std140) uniform Uniforms {\n      vec4 iMouse;\n  vec2 iResolution;\n    };\n  const float pi = 3.14159;\nfloat sigmoid(float x){\n   return x/(1.+abs(x));\n}\nfloat iter(vec2 p, vec4 a, vec4 wt, vec4 ws, float t, float m, float stereo){\n    float wp = .2;\n    vec4 phase = vec4(mod(t, wp), mod(t+wp*.25, wp), mod(t+wp*.5, wp), mod(t+wp*.75, wp))/wp;\n    float zoom = 1./(1.+.5*(p.x*p.x+p.y*p.y));\n    vec4 scale = zoom*pow(vec4(2.), -4.*phase);\n    vec4 ms = .5-.5*cos(2.*pi*phase);\n    vec4 pan = stereo/scale*(1.-phase)*(1.-phase);\n    vec4 v = ms*sin( wt*(t+m) + (m+ws*scale)*((p.x+pan) * cos((t+m)*a) + p.y * sin((t+m)*a)));\n    return sigmoid(v.x+v.y+v.z+v.w+m);\n}\nvec3 scene(float gt, vec2 uv, vec4 a0, vec4 wt0, vec4 ws0, float blur){\n    float tm = mod(.0411*gt, 1.);\n    tm = sin(2.*pi*tm*tm);\n    float t = (.04*gt + .05*tm);\n    float stereo = 1.*(sigmoid(2.*(sin(1.325*t*cos(.5*t))+sin(-.7*t*sin(.77*t)))));\n    uv+= .5*sin(.33*t)*vec2(cos(t), sin(t));\n    float p0 = iter(uv, a0, wt0, ws0, t, 0., stereo);\n     float p1 = iter(uv, a0, wt0, ws0, t, p0, stereo);\n    float p2 = sigmoid(p0/(p1+blur));\n    float p3 = iter(uv, a0, wt0, ws0, t, p2, stereo);\n    float p4 = sigmoid(p3/(p2+blur));\n    float p5 = iter(uv, a0, wt0, ws0, t, p4, stereo);\n    float p6 = sigmoid(p4/(p5+blur));\n    float p7 = iter(uv, a0, wt0, ws0, t, p6, stereo);\n    float p8 = sigmoid(p4/(p2+blur));\n    float p9 = sigmoid(p8/(p7+blur));\n    float p10 = iter(uv, a0, wt0, ws0, t, p8, stereo);\n    float p11 = iter(uv, a0, wt0, ws0, t, p9, stereo);\n    float p12 = sigmoid(p11/(p10+blur));\n    float p13 = iter(uv, a0, wt0, ws0, t, p12, stereo);\n    vec3 accent_color = vec3(1.,0.2,0.);\n    float r = sigmoid(p0+p1+p5+p7+p10+p11+p13);\n    float g = sigmoid(p0-p1+p3+p7+p10+p11);\n    float b = sigmoid(p0+p1+p3+p5+p11+p13);\n    vec3 c = max(vec3(0.), .4+.6*vec3(r,g,b));\n    float eps = .4;\n    float canary = min(abs(p1), abs(p2));\n    canary = min(canary, abs(p5));\n    canary = min(canary, abs(p7));\n    canary = min(canary, abs(p10));\n    float m = max(0.,eps-canary)/eps;\n    m = sigmoid((m-.5)*700./(1.+10.*blur))*.5+.5;\n    vec3 m3 = m*(1.-accent_color);\n    c *= .8*(1.-m3)+.3;\n    return c;\n}\nvec4 frag() {\n  vec4 ssr_frag_out;\n    float s = min(iResolution.x, iResolution.y);\n     vec2 uv = (2.*gl_FragCoord.xy - vec2(iResolution.xy)) / s;\n    float blur = .5*(uv.x*uv.x+uv.y*uv.y);\n    vec4 a0 = pi*vec4(.1, -.11, .111, -.1111);\n    vec4 wt0 = 2.*pi*vec4(.3);\n    vec4 ws0 = 2.5*vec4(11., 13., 11., 5.);\n    float mb = 1.;\n    float t = 1100.+cc_time[0];\n    vec3 c = scene(t, uv, a0, wt0, ws0, blur)\n        + scene(t-mb*.00185, uv+(1.+blur)*vec2(.66/s, 0.), a0, wt0, ws0, blur)\n        + scene(t-mb*.00370, uv+(1.+blur)*vec2(-.66/s, 0.), a0, wt0, ws0, blur)\n        + scene(t-mb*.00555, uv+(1.+blur)*vec2(0., .66/s), a0, wt0, ws0, blur)\n        + scene(t-mb*.00741, uv+(1.+blur)*vec2(0., -.66/s), a0, wt0, ws0, blur)\n        + scene(t-mb*.00926, uv+(1.+blur)*vec2(.5/s, .5/s), a0, wt0, ws0, blur)\n        + scene(t-mb*.01111, uv+(1.+blur)*vec2(-.5/s, .5/s), a0, wt0, ws0, blur)\n        + scene(t-mb*.01296, uv+(1.+blur)*vec2(-.5/s, -.5/s), a0, wt0, ws0, blur)\n        + scene(t-mb*.01481, uv+(1.+blur)*vec2(.5/s, -.5/s), a0, wt0, ws0, blur)\n        ;\n    c/=9.;\n    ssr_frag_out = vec4(c,1.0);\n    return ssr_frag_out;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define REFLECTION_PROBE_TYPE_BLEND 3\n  #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n      #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_SPHERE 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_POINT 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n  #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n    #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n  #endif\n  #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n  #endif\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 color;\nvarying vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n  pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n  pos = cc_matView * pos;\n  pos.xyz = floor(pos.xyz);\n  pos = cc_matProj * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n  uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\n  precision highp float;\n  #if USE_ALPHA_TEST\n  #endif\n  uniform highp vec4 cc_time;\n  varying vec4 color;\n  #if USE_TEXTURE\n    varying vec2 uv0;\n    uniform sampler2D cc_spriteTexture;\n  #endif\n       uniform vec2 iResolution;\n  const float pi = 3.14159;\nfloat sigmoid(float x){\n   return x/(1.+abs(x));\n}\nfloat iter(vec2 p, vec4 a, vec4 wt, vec4 ws, float t, float m, float stereo){\n    float wp = .2;\n    vec4 phase = vec4(mod(t, wp), mod(t+wp*.25, wp), mod(t+wp*.5, wp), mod(t+wp*.75, wp))/wp;\n    float zoom = 1./(1.+.5*(p.x*p.x+p.y*p.y));\n    vec4 scale = zoom*pow(vec4(2.), -4.*phase);\n    vec4 ms = .5-.5*cos(2.*pi*phase);\n    vec4 pan = stereo/scale*(1.-phase)*(1.-phase);\n    vec4 v = ms*sin( wt*(t+m) + (m+ws*scale)*((p.x+pan) * cos((t+m)*a) + p.y * sin((t+m)*a)));\n    return sigmoid(v.x+v.y+v.z+v.w+m);\n}\nvec3 scene(float gt, vec2 uv, vec4 a0, vec4 wt0, vec4 ws0, float blur){\n    float tm = mod(.0411*gt, 1.);\n    tm = sin(2.*pi*tm*tm);\n    float t = (.04*gt + .05*tm);\n    float stereo = 1.*(sigmoid(2.*(sin(1.325*t*cos(.5*t))+sin(-.7*t*sin(.77*t)))));\n    uv+= .5*sin(.33*t)*vec2(cos(t), sin(t));\n    float p0 = iter(uv, a0, wt0, ws0, t, 0., stereo);\n     float p1 = iter(uv, a0, wt0, ws0, t, p0, stereo);\n    float p2 = sigmoid(p0/(p1+blur));\n    float p3 = iter(uv, a0, wt0, ws0, t, p2, stereo);\n    float p4 = sigmoid(p3/(p2+blur));\n    float p5 = iter(uv, a0, wt0, ws0, t, p4, stereo);\n    float p6 = sigmoid(p4/(p5+blur));\n    float p7 = iter(uv, a0, wt0, ws0, t, p6, stereo);\n    float p8 = sigmoid(p4/(p2+blur));\n    float p9 = sigmoid(p8/(p7+blur));\n    float p10 = iter(uv, a0, wt0, ws0, t, p8, stereo);\n    float p11 = iter(uv, a0, wt0, ws0, t, p9, stereo);\n    float p12 = sigmoid(p11/(p10+blur));\n    float p13 = iter(uv, a0, wt0, ws0, t, p12, stereo);\n    vec3 accent_color = vec3(1.,0.2,0.);\n    float r = sigmoid(p0+p1+p5+p7+p10+p11+p13);\n    float g = sigmoid(p0-p1+p3+p7+p10+p11);\n    float b = sigmoid(p0+p1+p3+p5+p11+p13);\n    vec3 c = max(vec3(0.), .4+.6*vec3(r,g,b));\n    float eps = .4;\n    float canary = min(abs(p1), abs(p2));\n    canary = min(canary, abs(p5));\n    canary = min(canary, abs(p7));\n    canary = min(canary, abs(p10));\n    float m = max(0.,eps-canary)/eps;\n    m = sigmoid((m-.5)*700./(1.+10.*blur))*.5+.5;\n    vec3 m3 = m*(1.-accent_color);\n    c *= .8*(1.-m3)+.3;\n    return c;\n}\nvec4 frag() {\n  vec4 ssr_frag_out;\n    float s = min(iResolution.x, iResolution.y);\n     vec2 uv = (2.*gl_FragCoord.xy - vec2(iResolution.xy)) / s;\n    float blur = .5*(uv.x*uv.x+uv.y*uv.y);\n    vec4 a0 = pi*vec4(.1, -.11, .111, -.1111);\n    vec4 wt0 = 2.*pi*vec4(.3);\n    vec4 ws0 = 2.5*vec4(11., 13., 11., 5.);\n    float mb = 1.;\n    float t = 1100.+cc_time[0];\n    vec3 c = scene(t, uv, a0, wt0, ws0, blur)\n        + scene(t-mb*.00185, uv+(1.+blur)*vec2(.66/s, 0.), a0, wt0, ws0, blur)\n        + scene(t-mb*.00370, uv+(1.+blur)*vec2(-.66/s, 0.), a0, wt0, ws0, blur)\n        + scene(t-mb*.00555, uv+(1.+blur)*vec2(0., .66/s), a0, wt0, ws0, blur)\n        + scene(t-mb*.00741, uv+(1.+blur)*vec2(0., -.66/s), a0, wt0, ws0, blur)\n        + scene(t-mb*.00926, uv+(1.+blur)*vec2(.5/s, .5/s), a0, wt0, ws0, blur)\n        + scene(t-mb*.01111, uv+(1.+blur)*vec2(-.5/s, .5/s), a0, wt0, ws0, blur)\n        + scene(t-mb*.01296, uv+(1.+blur)*vec2(-.5/s, -.5/s), a0, wt0, ws0, blur)\n        + scene(t-mb*.01481, uv+(1.+blur)*vec2(.5/s, -.5/s), a0, wt0, ws0, blur)\n        ;\n    c/=9.;\n    ssr_frag_out = vec4(c,1.0);\n    return ssr_frag_out;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":["USE_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":56,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":45}},"defines":[{"name":"USE_LOCAL","type":"boolean"},{"name":"SAMPLE_FROM_RT","type":"boolean"},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"USE_TEXTURE","type":"boolean"}]}],[{"passes":[{"program":"../Res/UI/shadertoy/space2|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"iResolution":{"type":14,"value":[960,640]},"iMouse":{"type":16,"value":[0.5,0.5,0.5,0.5]},"alphaThreshold":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]],[[[40,"space2",[{}],[{"USE_TEXTURE":true}]]],0,0,[0],[4],[11]],[[{"name":"default_sprite_splash","rect":{"x":0,"y":0,"width":2,"height":2},"offset":{"x":0,"y":0},"originalSize":{"width":2,"height":2},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-1,-1,0,1,-1,0,-1,1,0,1,1,0],"indexes":[0,1,2,2,1,3],"uv":[0,2,2,2,0,0,2,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-1,"y":-1,"z":0},"maxPos":{"x":1,"y":1,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[5],0,[0],[8],[12]],[[[11,"../Res/UI/shadertoy/fire",[{"hash":1165839210,"name":"../Res/UI/shadertoy/fire|sprite-vs:vert|sprite-fs:frag","blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Uniforms","stageFlags":16,"binding":1,"members":[{"name":"iMouse","type":16,"count":1},{"name":"iResolution","type":14,"count":1},{"name":"PI","type":13,"count":1}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"sampleType":0,"tags":{"builtin":"local"},"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Uniforms","stageFlags":16,"binding":1,"members":[{"name":"iMouse","type":16,"count":1},{"name":"iResolution","type":14,"count":1},{"name":"PI","type":13,"count":1}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n    highp vec4 cc_reflectionProbeBlendData1;\n    highp vec4 cc_reflectionProbeBlendData2;\n  };\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define REFLECTION_PROBE_TYPE_BLEND 3\n  #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n      #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_SPHERE 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_POINT 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n  #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n    #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n  #endif\n  #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n  #endif\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 color;\nout vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n  pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n  pos = cc_matView * pos;\n  pos.xyz = floor(pos.xyz);\n  pos = cc_matProj * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n  uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\n  precision highp float;\n  #if USE_ALPHA_TEST\n    layout(std140) uniform ALPHA_TEST_DATA {\n      float alphaThreshold;\n    };\n  #endif\n  layout(std140) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n    mediump vec4 cc_probeInfo;\n    mediump vec4 cc_debug_view_mode;\n  };\n  layout(std140) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_surfaceTransform;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  in vec4 color;\n  #if USE_TEXTURE\n    in vec2 uv0;\n    uniform sampler2D cc_spriteTexture;\n  #endif\n  layout(std140) uniform Uniforms {\n      vec4 iMouse;\n  vec2 iResolution;\n  float PI;\n    };\n  vec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\nfloat snoise(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy;\n  vec3 x3 = x0 - D.yyy;\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n  float n_ = 0.142857142857;\n  vec3  ns = n_ * D.wyz - D.xzx;\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n  vec4 norm = inversesqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\nfloat prng(in vec2 seed) {\n  seed = fract (seed * vec2 (5.3983, 5.4427));\n  seed += dot (seed.yx, seed.xy + vec2 (21.5351, 14.3137));\n  return fract (seed.x * seed.y * 95.4337);\n}\nfloat noiseStack(vec3 pos,int octaves,float falloff){\n  float noise = snoise(vec3(pos));\n  float off = 1.0;\n  if (octaves>1) {\n    pos *= 2.0;\n    off *= falloff;\n    noise = (1.0-off)*noise + off*snoise(vec3(pos));\n  }\n  if (octaves>2) {\n    pos *= 2.0;\n    off *= falloff;\n    noise = (1.0-off)*noise + off*snoise(vec3(pos));\n  }\n  if (octaves>3) {\n    pos *= 2.0;\n    off *= falloff;\n    noise = (1.0-off)*noise + off*snoise(vec3(pos));\n  }\n  return (1.0+noise)/2.0;\n}\nvec2 noiseStackUV(vec3 pos,int octaves,float falloff,float diff){\n  float displaceA = noiseStack(pos,octaves,falloff);\n  float displaceB = noiseStack(pos+vec3(3984.293,423.21,5235.19),octaves,falloff);\n  return vec2(displaceA,displaceB);\n}\nvec4 frag() {\n  vec4 ssr_frag_out;\n    float time = cc_time[0];\n    vec2 resolution = iResolution.xy;\n  vec2 drag = iMouse.xy;\n  vec2 offset = iMouse.xy;\n  float xpart = gl_FragCoord.x/resolution.x;\n  float ypart = gl_FragCoord.y/resolution.y;\n  float clip = 210.0;\n  float ypartClip = gl_FragCoord.y/clip;\n  float ypartClippedFalloff = clamp(2.0-ypartClip,0.0,1.0);\n  float ypartClipped = min(ypartClip,1.0);\n  float ypartClippedn = 1.0-ypartClipped;\n  float xfuel = 1.0-abs(2.0*xpart-1.0);\n  float timeSpeed = 0.5;\n  float realTime = timeSpeed*time;\n  vec2 coordScaled = 0.01*gl_FragCoord.xy - 0.02*vec2(offset.x,0.0);\n  vec3 position = vec3(coordScaled,0.0) + vec3(1223.0,6434.0,8425.0);\n  vec3 flow = vec3(4.1*(0.5-xpart)*pow(ypartClippedn,4.0),-2.0*xfuel*pow(ypartClippedn,64.0),0.0);\n  vec3 timing = realTime*vec3(0.0,-1.7,1.1) + flow;\n  vec3 displacePos = vec3(1.0,0.5,1.0)*2.4*position+realTime*vec3(0.01,-0.7,1.3);\n  vec3 displace3 = vec3(noiseStackUV(displacePos,2,0.4,0.1),0.0);\n  vec3 noiseCoord = (vec3(2.0,1.0,1.0)*position+timing+0.4*displace3)/1.0;\n  float noise = noiseStack(noiseCoord,3,0.4);\n  float flames = pow(ypartClipped,0.3*xfuel)*pow(noise,0.3*xfuel);\n  float f = ypartClippedFalloff*pow(1.0-flames*flames*flames,8.0);\n  float fff = f*f*f;\n  vec3 fire = 1.5*vec3(f, fff, fff*fff);\n  float smokeNoise = 0.5+snoise(0.4*position+timing*vec3(1.0,1.0,0.2))/2.0;\n  vec3 smoke = vec3(0.3*pow(xfuel,3.0)*pow(ypart,2.0)*(smokeNoise+0.4*(1.0-noise)));\n  float sparkGridSize = 30.0;\n  vec2 sparkCoord = gl_FragCoord.xy - vec2(2.0*offset.x,190.0*realTime);\n  sparkCoord -= 30.0*noiseStackUV(0.01*vec3(sparkCoord,30.0*time),1,0.4,0.1);\n  sparkCoord += 100.0*flow.xy;\n  if (mod(sparkCoord.y/sparkGridSize,2.0)<1.0) sparkCoord.x += 0.5*sparkGridSize;\n  vec2 sparkGridIndex = vec2(floor(sparkCoord/sparkGridSize));\n  float sparkRandom = prng(sparkGridIndex);\n  float sparkLife = min(10.0*(1.0-min((sparkGridIndex.y+(190.0*realTime/sparkGridSize))/(24.0-20.0*sparkRandom),1.0)),1.0);\n  vec3 sparks = vec3(0.0);\n  if (sparkLife>0.0) {\n    float sparkSize = xfuel*xfuel*sparkRandom*0.08;\n    float sparkRadians = 999.0*sparkRandom*2.0*PI + 2.0*time;\n    vec2 sparkCircular = vec2(sin(sparkRadians),cos(sparkRadians));\n    vec2 sparkOffset = (0.5-sparkSize)*sparkGridSize*sparkCircular;\n    vec2 sparkModulus = mod(sparkCoord+sparkOffset,sparkGridSize) - 0.5*vec2(sparkGridSize);\n    float sparkLength = length(sparkModulus);\n    float sparksGray = max(0.0, 1.0 - sparkLength/(sparkSize*sparkGridSize));\n    sparks = sparkLife*sparksGray*vec3(1.0,0.3,0.0);\n  }\n  ssr_frag_out = vec4(max(fire,sparks)+smoke,1.0);\n    return ssr_frag_out;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define REFLECTION_PROBE_TYPE_BLEND 3\n  #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n      #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_SPHERE 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_POINT 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n  #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n    #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n  #endif\n  #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n  #endif\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 color;\nvarying vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n  pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n  pos = cc_matView * pos;\n  pos.xyz = floor(pos.xyz);\n  pos = cc_matProj * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n  uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\n  precision highp float;\n  #if USE_ALPHA_TEST\n  #endif\n  uniform highp vec4 cc_time;\n  varying vec4 color;\n  #if USE_TEXTURE\n    varying vec2 uv0;\n    uniform sampler2D cc_spriteTexture;\n  #endif\n       uniform vec4 iMouse;\n     uniform vec2 iResolution;\n     uniform float PI;\n  vec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\nfloat snoise(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy;\n  vec3 x3 = x0 - D.yyy;\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n  float n_ = 0.142857142857;\n  vec3  ns = n_ * D.wyz - D.xzx;\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n  vec4 norm = inversesqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\nfloat prng(in vec2 seed) {\n  seed = fract (seed * vec2 (5.3983, 5.4427));\n  seed += dot (seed.yx, seed.xy + vec2 (21.5351, 14.3137));\n  return fract (seed.x * seed.y * 95.4337);\n}\nfloat noiseStack(vec3 pos,int octaves,float falloff){\n  float noise = snoise(vec3(pos));\n  float off = 1.0;\n  if (octaves>1) {\n    pos *= 2.0;\n    off *= falloff;\n    noise = (1.0-off)*noise + off*snoise(vec3(pos));\n  }\n  if (octaves>2) {\n    pos *= 2.0;\n    off *= falloff;\n    noise = (1.0-off)*noise + off*snoise(vec3(pos));\n  }\n  if (octaves>3) {\n    pos *= 2.0;\n    off *= falloff;\n    noise = (1.0-off)*noise + off*snoise(vec3(pos));\n  }\n  return (1.0+noise)/2.0;\n}\nvec2 noiseStackUV(vec3 pos,int octaves,float falloff,float diff){\n  float displaceA = noiseStack(pos,octaves,falloff);\n  float displaceB = noiseStack(pos+vec3(3984.293,423.21,5235.19),octaves,falloff);\n  return vec2(displaceA,displaceB);\n}\nvec4 frag() {\n  vec4 ssr_frag_out;\n    float time = cc_time[0];\n    vec2 resolution = iResolution.xy;\n  vec2 drag = iMouse.xy;\n  vec2 offset = iMouse.xy;\n  float xpart = gl_FragCoord.x/resolution.x;\n  float ypart = gl_FragCoord.y/resolution.y;\n  float clip = 210.0;\n  float ypartClip = gl_FragCoord.y/clip;\n  float ypartClippedFalloff = clamp(2.0-ypartClip,0.0,1.0);\n  float ypartClipped = min(ypartClip,1.0);\n  float ypartClippedn = 1.0-ypartClipped;\n  float xfuel = 1.0-abs(2.0*xpart-1.0);\n  float timeSpeed = 0.5;\n  float realTime = timeSpeed*time;\n  vec2 coordScaled = 0.01*gl_FragCoord.xy - 0.02*vec2(offset.x,0.0);\n  vec3 position = vec3(coordScaled,0.0) + vec3(1223.0,6434.0,8425.0);\n  vec3 flow = vec3(4.1*(0.5-xpart)*pow(ypartClippedn,4.0),-2.0*xfuel*pow(ypartClippedn,64.0),0.0);\n  vec3 timing = realTime*vec3(0.0,-1.7,1.1) + flow;\n  vec3 displacePos = vec3(1.0,0.5,1.0)*2.4*position+realTime*vec3(0.01,-0.7,1.3);\n  vec3 displace3 = vec3(noiseStackUV(displacePos,2,0.4,0.1),0.0);\n  vec3 noiseCoord = (vec3(2.0,1.0,1.0)*position+timing+0.4*displace3)/1.0;\n  float noise = noiseStack(noiseCoord,3,0.4);\n  float flames = pow(ypartClipped,0.3*xfuel)*pow(noise,0.3*xfuel);\n  float f = ypartClippedFalloff*pow(1.0-flames*flames*flames,8.0);\n  float fff = f*f*f;\n  vec3 fire = 1.5*vec3(f, fff, fff*fff);\n  float smokeNoise = 0.5+snoise(0.4*position+timing*vec3(1.0,1.0,0.2))/2.0;\n  vec3 smoke = vec3(0.3*pow(xfuel,3.0)*pow(ypart,2.0)*(smokeNoise+0.4*(1.0-noise)));\n  float sparkGridSize = 30.0;\n  vec2 sparkCoord = gl_FragCoord.xy - vec2(2.0*offset.x,190.0*realTime);\n  sparkCoord -= 30.0*noiseStackUV(0.01*vec3(sparkCoord,30.0*time),1,0.4,0.1);\n  sparkCoord += 100.0*flow.xy;\n  if (mod(sparkCoord.y/sparkGridSize,2.0)<1.0) sparkCoord.x += 0.5*sparkGridSize;\n  vec2 sparkGridIndex = vec2(floor(sparkCoord/sparkGridSize));\n  float sparkRandom = prng(sparkGridIndex);\n  float sparkLife = min(10.0*(1.0-min((sparkGridIndex.y+(190.0*realTime/sparkGridSize))/(24.0-20.0*sparkRandom),1.0)),1.0);\n  vec3 sparks = vec3(0.0);\n  if (sparkLife>0.0) {\n    float sparkSize = xfuel*xfuel*sparkRandom*0.08;\n    float sparkRadians = 999.0*sparkRandom*2.0*PI + 2.0*time;\n    vec2 sparkCircular = vec2(sin(sparkRadians),cos(sparkRadians));\n    vec2 sparkOffset = (0.5-sparkSize)*sparkGridSize*sparkCircular;\n    vec2 sparkModulus = mod(sparkCoord+sparkOffset,sparkGridSize) - 0.5*vec2(sparkGridSize);\n    float sparkLength = length(sparkModulus);\n    float sparksGray = max(0.0, 1.0 - sparkLength/(sparkSize*sparkGridSize));\n    sparks = sparkLife*sparksGray*vec3(1.0,0.3,0.0);\n  }\n  ssr_frag_out = vec4(max(fire,sparks)+smoke,1.0);\n    return ssr_frag_out;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":["USE_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":56,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":46}},"defines":[{"name":"USE_LOCAL","type":"boolean"},{"name":"SAMPLE_FROM_RT","type":"boolean"},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"USE_TEXTURE","type":"boolean"}]}],[{"passes":[{"program":"../Res/UI/shadertoy/fire|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"iResolution":{"type":14,"value":[960,640]},"iMouse":{"type":16,"value":[0.5,0.5,0.5,0.5]},"alphaThreshold":{"type":13,"value":[0.5]},"PI":{"type":13,"value":[3.141592653589793]}}}]}]]],0,0,[],[],[]]]]
